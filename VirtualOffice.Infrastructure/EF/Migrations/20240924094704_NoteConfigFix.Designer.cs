// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualOffice.Infrastructure.EF;

#nullable disable

namespace VirtualOffice.Infrastructure.Ef.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20240924094704_NoteConfigFix")]
    partial class NoteConfigFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserCalendarEvent", b =>
                {
                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_AssignedEmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CalendarEventId", "_AssignedEmployeesId");

                    b.HasIndex("_AssignedEmployeesId");

                    b.ToTable("ApplicationUserCalendarEvent");
                });

            modelBuilder.Entity("ApplicationUserEmployeeTask", b =>
                {
                    b.Property<Guid>("EmployeeTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_AssignedEmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeTaskId", "_AssignedEmployeesId");

                    b.HasIndex("_AssignedEmployeesId");

                    b.ToTable("ApplicationUserEmployeeTask");
                });

            modelBuilder.Entity("ApplicationUserMeeting", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_AssignedEmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetingId", "_AssignedEmployeesId");

                    b.HasIndex("_AssignedEmployeesId");

                    b.ToTable("ApplicationUserMeeting");
                });

            modelBuilder.Entity("ApplicationUserOffice", b =>
                {
                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_membersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OfficeId", "_membersId");

                    b.HasIndex("_membersId");

                    b.ToTable("ApplicationUserOffice");
                });

            modelBuilder.Entity("ApplicationUserPrivateChatRoom", b =>
                {
                    b.Property<Guid>("PrivateChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_ParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivateChatRoomId", "_ParticipantsId");

                    b.HasIndex("_ParticipantsId");

                    b.ToTable("ApplicationUserPrivateChatRoom");
                });

            modelBuilder.Entity("ApplicationUserPublicChatRoom", b =>
                {
                    b.Property<Guid>("PublicChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_ParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublicChatRoomId", "_ParticipantsId");

                    b.HasIndex("_ParticipantsId");

                    b.ToTable("ApplicationUserPublicChatRoom");
                });

            modelBuilder.Entity("MessagePrivateChatRoom", b =>
                {
                    b.Property<Guid>("PrivateChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_MessagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivateChatRoomId", "_MessagesId");

                    b.HasIndex("_MessagesId");

                    b.ToTable("MessagePrivateChatRoom");
                });

            modelBuilder.Entity("MessagePublicChatRoom", b =>
                {
                    b.Property<Guid>("PublicChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_MessagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublicChatRoomId", "_MessagesId");

                    b.HasIndex("_MessagesId");

                    b.ToTable("MessagePublicChatRoom");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_Permissions")
                        .HasColumnType("int");

                    b.Property<string>("_Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.EmployeeTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("_Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("_TaskStatus")
                        .HasColumnType("int");

                    b.Property<string>("_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTasks");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SentByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SentByUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("_createdBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("_createdBy");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_officeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.PrivateChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PrivateChatRooms");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.PrivateDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_creationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrivateDocuments");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.PublicChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicChatRooms");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.PublicDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicDocuments");
                });

            modelBuilder.Entity("VirtualOffice.Infrastructure.Identity.AppIdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ApplicationUserCalendarEvent", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.CalendarEvent", null)
                        .WithMany()
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_AssignedEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserEmployeeTask", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.EmployeeTask", null)
                        .WithMany()
                        .HasForeignKey("EmployeeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_AssignedEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserMeeting", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_AssignedEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserOffice", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_membersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserPrivateChatRoom", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.PrivateChatRoom", null)
                        .WithMany()
                        .HasForeignKey("PrivateChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserPublicChatRoom", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.PublicChatRoom", null)
                        .WithMany()
                        .HasForeignKey("PublicChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessagePrivateChatRoom", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.PrivateChatRoom", null)
                        .WithMany()
                        .HasForeignKey("PrivateChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.Message", null)
                        .WithMany()
                        .HasForeignKey("_MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessagePublicChatRoom", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.PublicChatRoom", null)
                        .WithMany()
                        .HasForeignKey("PublicChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Domain.Entities.Message", null)
                        .WithMany()
                        .HasForeignKey("_MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VirtualOffice.Infrastructure.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VirtualOffice.Infrastructure.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualOffice.Infrastructure.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VirtualOffice.Infrastructure.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.Organization", null)
                        .WithMany("_organizationUsers")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Message", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SentByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Note", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("_createdBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Office", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.Organization", null)
                        .WithMany("_offices")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Organization", b =>
                {
                    b.OwnsOne("VirtualOffice.Domain.Entities.Subscription", "_subscription", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("_isPayed")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("_subEndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("_subStartDate")
                                .HasColumnType("datetime2");

                            b1.Property<int>("_subType")
                                .HasColumnType("int");

                            b1.Property<decimal>("_subscriptionFee")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Subscriptions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("_subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.PrivateDocument", b =>
                {
                    b.OwnsMany("VirtualOffice.Domain.ValueObjects.Document.DocumentFilePath", "_attachmentFilePaths", b1 =>
                        {
                            b1.Property<Guid>("PrivateDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FilePath");

                            b1.HasKey("PrivateDocumentId", "Id");

                            b1.ToTable("PrivateDocuments__attachmentFilePaths");

                            b1.WithOwner()
                                .HasForeignKey("PrivateDocumentId");
                        });

                    b.Navigation("_attachmentFilePaths");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.PublicDocument", b =>
                {
                    b.OwnsMany("VirtualOffice.Domain.ValueObjects.Document.DocumentFilePath", "_attachmentFilePaths", b1 =>
                        {
                            b1.Property<Guid>("PublicDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FilePath");

                            b1.HasKey("PublicDocumentId", "Id");

                            b1.ToTable("PublicDocuments__attachmentFilePaths");

                            b1.WithOwner()
                                .HasForeignKey("PublicDocumentId");
                        });

                    b.OwnsMany("VirtualOffice.Domain.ValueObjects.ApplicationUser.ApplicationUserId", "_eligibleForRead", b1 =>
                        {
                            b1.Property<Guid>("PublicDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("UserId");

                            b1.HasKey("PublicDocumentId", "Id");

                            b1.ToTable("PublicDocumentEligibleForRead", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PublicDocumentId");
                        });

                    b.OwnsMany("VirtualOffice.Domain.ValueObjects.ApplicationUser.ApplicationUserId", "_eligibleForWrite", b1 =>
                        {
                            b1.Property<Guid>("PublicDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("UserId");

                            b1.HasKey("PublicDocumentId", "Id");

                            b1.ToTable("PublicDocumentEligibleForWrite", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PublicDocumentId");
                        });

                    b.OwnsOne("VirtualOffice.Domain.ValueObjects.Document.DocumentCreationDetails", "_creationDetails", b1 =>
                        {
                            b1.Property<Guid>("PublicDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("DocumentCreationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreationDate");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CreatedByUserId");

                            b1.HasKey("PublicDocumentId");

                            b1.ToTable("DocumentCreationDetails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PublicDocumentId");
                        });

                    b.Navigation("_attachmentFilePaths");

                    b.Navigation("_creationDetails")
                        .IsRequired();

                    b.Navigation("_eligibleForRead");

                    b.Navigation("_eligibleForWrite");
                });

            modelBuilder.Entity("VirtualOffice.Infrastructure.Identity.AppIdentityUser", b =>
                {
                    b.HasOne("VirtualOffice.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("VirtualOffice.Infrastructure.Identity.AppIdentityUser", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("VirtualOffice.Domain.Entities.Organization", b =>
                {
                    b.Navigation("_offices");

                    b.Navigation("_organizationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
